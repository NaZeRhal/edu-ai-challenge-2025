Okay, let's analyze your project requirements to select the most suitable database type.

Chain-of-Thought Reasoning & Analysis:
1. Social platform with millions of users: This immediately signals the need for a database that can handle large volumes of data and a high number of concurrent operations. Scalability will be a prime concern.
2. Need to store profiles, posts, and connections between users:
- Profiles: This is generally structured data (e.g., user ID, name, email) but can also benefit from some flexibility for user-defined fields. Document databases are often considered good for profiles.
- Posts: This can be mixed-media content (text, images, links) and will have associated metadata (author, timestamp, etc.). Document databases are also suitable here.
- Connections between users: This is the critical part for a social network. It's about relationships like "friends with," "follows," "is_member_of_group." This inherently forms a graph or network structure. Efficiently querying these relationships (e.g., "friends of friends," "mutual friends," "people you may know") is paramount. Graph databases are specifically designed for this.
3. High data read speed required: Users spend most of their time consuming content (reading profiles, scrolling through feeds, viewing posts). The database must be optimized for fast data retrieval.
4. Expected 80% read operations, 20% write operations: This confirms a read-heavy workload. The database architecture and any associated caching strategies should heavily favor read performance. While write performance is still important, reads are the priority.
5. Scalability is important as the user base grows: The system must be able to scale horizontally (adding more servers/nodes) to handle an increasing number of users and data load without significant performance degradation.

Database Type Analysis & Justification:
1. Relational Databases (e.g., MySQL, PostgreSQL):
Pros: Mature, ACID compliant, good for structured data like basic user profiles.
Cons: Representing and querying complex relationships (the social graph) often requires numerous JOIN operations, which become slow and resource-intensive at scale (millions of users). Horizontal scaling can be more complex than with many NoSQL options. While individual record reads can be fast, the performance of deep relationship queries is a major concern for social networks.
2. Document Databases (e.g., MongoDB, Couchbase):
Pros: Flexible schema is good for evolving profiles and varied post content. They generally scale horizontally well. Storing entire documents (like a user profile or a post with its comments) can lead to fast reads for those specific items.
Cons: While you can model relationships (e.g., by embedding arrays of friend IDs), querying deep or complex connections (the core of a social graph) is not their primary strength and can be less efficient than dedicated graph databases. Tasks like "friends of friends" can become cumbersome.
3. Key-Value Stores (e.g., Redis, Memcached):
Pros: Extremely fast for simple lookups (e.g., caching user sessions, frequently accessed profile data).
Cons: Not suitable as the primary database for complex, interconnected data like a social graph. Their data modeling capabilities are too simplistic for rich relationships.
4. Column-Family Databases (e.g., Cassandra, HBase):
Pros: Excellent for write-heavy workloads and massive datasets, with strong horizontal scalability.
Cons: Data modeling is quite different. While they can handle large-scale social media data, querying complex relationships isn't as natural or efficient as graph databases. Their strength lies more in high-throughput scenarios for specific query patterns.
5. Graph Databases (e.g., Neo4j, Amazon Neptune, ArangoDB):
Pros: Explicitly designed to store, manage, and query interconnected data (nodes and relationships). Traversing relationships ("friends of friends," "people who liked X and also follow Y") is extremely fast and intuitive. This directly addresses the "connections between users" requirement, which is central to a social platform. Many graph databases are built for scalability and can handle large datasets. Their performance for relationship-based queries is often significantly better than relational databases for these tasks.
Cons: Might not be the absolute best for storing very large binary objects directly within the graph nodes (though metadata and links are fine). Historically, some perceived them as more niche, but their adoption is widespread for social networks and similar use cases.

Selection:
Given the critical requirement to efficiently manage and query the "connections between users" at scale, with high read performance for these relationship-based queries, a Graph Database is the most suitable primary database type.

- User profiles and posts can be stored as properties on nodes within the graph, or as distinct nodes linked to user nodes.
- The 80% read operations, especially for feed generation, recommendations, and exploring connections, will heavily leverage the graph traversal capabilities.
- Modern graph databases are designed to scale horizontally to accommodate millions of users.

Conclusion:
For a social platform with millions of users needing to store profiles, posts, and especially efficiently query connections between users with high read speed and scalability, a Graph Database is the most suitable choice for the core data model.  It excels in managing and querying complex relationships, which is fundamental to social networking applications. While other database types like document databases could be used for aspects like storing post content or extensive user profiles, the graph database is best positioned to handle the intricate web of social connections and the queries that depend on them.
It's also common for large social platforms to eventually adopt a polyglot persistence strategy, using different database types for different kinds of data or workloads (e.g., a document database for chat messages, a graph database for the social graph, and key-value stores for caching). However, for the central social graph aspect, a graph database provides the most direct and efficient solution. 
